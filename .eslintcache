[{"C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\index.js":"1","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\App.js":"2","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\Navigation.js":"3","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\DogList.js":"4","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\BreedsList.js":"5","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\Alphabet.js":"6","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\SubBreedsList.js":"7","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\DogCard.js":"8"},{"size":283,"mtime":1612277056295,"results":"9","hashOfConfig":"10"},{"size":2190,"mtime":1612975525004,"results":"11","hashOfConfig":"10"},{"size":1324,"mtime":1612904107484,"results":"12","hashOfConfig":"10"},{"size":1346,"mtime":1612901771999,"results":"13","hashOfConfig":"10"},{"size":3029,"mtime":1612974163234,"results":"14","hashOfConfig":"10"},{"size":2892,"mtime":1612967935916,"results":"15","hashOfConfig":"10"},{"size":3639,"mtime":1612975463274,"results":"16","hashOfConfig":"10"},{"size":432,"mtime":1612917005583,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"fg9x6o",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\index.js",[],["37","38"],"C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\App.js",[],"C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\Navigation.js",[],"C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\DogList.js",[],"C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\BreedsList.js",["39"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Input, Alert, List, Jumbotron, Spinner, ListInlineItem } from \"reactstrap\";\r\nimport DogCard from \"./DogCard\";\r\n\r\nconst BreedsList = ( { dogBreeds } ) => {\r\n    const [search, setSearch] = useState(\"\");\r\n    const [dogBreedImages, setDogBreedImages] = useState([]);\r\n    const [dogBreedName, setDogBreedName] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n    const { breed } = useParams();\r\n\r\n    const dogBreedsArr = Object.keys(dogBreeds);\r\n\r\n    const filteredBreeds = dogBreedsArr.filter(dogBreed => {\r\n        return dogBreed.toLowerCase().includes(search.toLowerCase());\r\n    });\r\n\r\n    let dogPicByBreed = dogBreedImages.map((dogPicURL) => {\r\n        return <DogCard key={dogPicURL} url={dogPicURL} />\r\n    })\r\n\r\n    let alertBar;\r\n\r\n    let handleOnClick = (e, dogBreed) => {\r\n        e.preventDefault();\r\n        setDogBreedName(dogBreed);\r\n        history.push(`/breed/${dogBreed}`);\r\n    }\r\n\r\n    let dogBreedListItem = filteredBreeds.map((dogBreed) => {\r\n        return <ListInlineItem key={dogBreed} style={{padding: \"0\"}}><Link onClick={(e)=> {handleOnClick(e, dogBreed)}}>{dogBreed}</Link></ListInlineItem>\r\n    })\r\n\r\n    let handleOnChange = (e, inputValue) => {\r\n        e.preventDefault();\r\n        setSearch(inputValue);\r\n        setDogBreedName(\"\");\r\n        setDogBreedImages([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios\r\n        .get(\"https://dog.ceo/api/breed/\" + dogBreedName + \"/images/random/20\")\r\n        .then(function (response) {\r\n            setDogBreedImages(response.data.message);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }, [dogBreedName, alertBar]);\r\n\r\n    if(!filteredBreeds.length) {\r\n        alertBar = (\r\n            <Alert color=\"warning\"><span style ={{ fontWeight: \"bold\" }}>Doggonit!</span> We can't find that dog breed.</Alert>\r\n        )\r\n    }\r\n\r\n    if(!dogBreeds) {\r\n        return(\r\n            <Spinner color=\"primary\" />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron className=\"jumbotron\">\r\n                <h1 className=\"display-3\">Dogs on things <span>by breed</span></h1>\r\n                <p className=\"lead\">Search for your favorite dog breed.</p>\r\n                <hr className=\"my-2\" />\r\n                <p>Select a dog breed below to see what they look like!</p>\r\n                <Input type=\"text\" placeholder=\"Search for a breed\" onChange={(e) => {handleOnChange(e, e.target.value)}}/>\r\n                <p className=\"lead\">\r\n                </p>\r\n            </Jumbotron>\r\n            <div className=\"dog-images-container\">\r\n                {dogPicByBreed}\r\n            </div>\r\n            <div className=\"dog-list-container\">\r\n                <List style={{ padding: \"0\" }}>{ dogBreedListItem }</List>\r\n                { alertBar }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BreedsList;\r\n\r\n","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\Alphabet.js",["40"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Spinner, Button, ButtonGroup, List, ListInlineItem, Jumbotron, Alert } from 'reactstrap';\r\nimport DogCard from \"./DogCard\";\r\n\r\nconst Alphabet = (props) => {\r\n    const [activeLetter, setActiveLetter] = useState();\r\n    const [dogBreedImages, setDogBreedImages] = useState([]);\r\n\r\n    const history = useHistory();\r\n    const { letter } = useParams();\r\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\".toUpperCase().split(\"\");\r\n    let breeds = Object.keys(props.dogBreeds);\r\n    let dogBreedName = \"\";\r\n\r\n    function getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    let handleOnClick = (e, letter) => {\r\n        e.preventDefault();\r\n        setActiveLetter(letter);\r\n        setDogBreedImages([]);\r\n        letter = letter.toLowerCase();\r\n        history.push(`/alphabetized/${letter}`);\r\n    }\r\n\r\n    const linkedLetterList = alphabet.map((letter) =>\r\n        <Button onClick={(e)=> {handleOnClick(e, letter)}}>{letter}</Button>\r\n    );\r\n\r\n    if (activeLetter) {\r\n        breeds = breeds.filter(dogBreed => dogBreed[0].toUpperCase() === activeLetter);\r\n        dogBreedName = breeds[getRandomInt(breeds.length - 1)]\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios\r\n        .get(\"https://dog.ceo/api/breed/\" + dogBreedName + \"/images/random/20\")\r\n        .then(function (response) {\r\n            setDogBreedImages(response.data.message);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }, [dogBreedName]);\r\n\r\n    if(!props.dogBreeds) {\r\n        return(\r\n            <Spinner color=\"primary\" />\r\n        );\r\n    };\r\n\r\n    let dogPicByBreed = dogBreedImages.map((dogPicURL) => {\r\n        return <DogCard key={dogPicURL} url={dogPicURL} />\r\n    })\r\n\r\n    let dogBreedArray = breeds.map((dogBreed) => {\r\n        return <ListInlineItem key={dogBreed}>{dogBreed}</ListInlineItem>;\r\n    });\r\n\r\n    if(breeds.length === 0) {\r\n        dogBreedArray = (\r\n            <Alert color=\"warning\"><span style ={{ fontWeight: \"bold\" }}>Doggonit!</span> There are no dog breeds that start with the letter {activeLetter}.</Alert>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron>\r\n                <h1 className=\"display-3\">Dog breeds on things <span>by letter</span></h1>\r\n                <p className=\"lead\">View a list of dog breeds that begin with the selected letter.</p>\r\n                <ButtonGroup style={{display: \"flex\", flexWrap: \"wrap\"}}>{linkedLetterList}</ButtonGroup>\r\n            </Jumbotron>\r\n            <List style={{ padding: \"0 3rem\" }}>{dogBreedArray}</List>\r\n            <div className=\"dog-images-container\">\r\n                {dogPicByBreed}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Alphabet;\r\n","C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\SubBreedsList.js",["41"],"C:\\Users\\meb60\\Documents\\Personal Coding Projects\\doggonit\\src\\components\\DogCard.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":13,"column":13,"nodeType":"48","messageId":"49","endLine":13,"endColumn":18},{"ruleId":"46","severity":1,"message":"50","line":12,"column":13,"nodeType":"48","messageId":"49","endLine":12,"endColumn":19},{"ruleId":"46","severity":1,"message":"51","line":14,"column":13,"nodeType":"48","messageId":"49","endLine":14,"endColumn":21},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'breed' is assigned a value but never used.","Identifier","unusedVar","'letter' is assigned a value but never used.","'subbreed' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]